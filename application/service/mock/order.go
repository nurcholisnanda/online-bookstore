// Code generated by MockGen. DO NOT EDIT.
// Source: order.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/nurcholisnanda/online-bookstore/application/dto"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// GetOrderHistory mocks base method.
func (m *MockOrderService) GetOrderHistory(arg0 uint) ([]*dto.OrderHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderHistory", arg0)
	ret0, _ := ret[0].([]*dto.OrderHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderHistory indicates an expected call of GetOrderHistory.
func (mr *MockOrderServiceMockRecorder) GetOrderHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderHistory", reflect.TypeOf((*MockOrderService)(nil).GetOrderHistory), arg0)
}

// MakeOrder mocks base method.
func (m *MockOrderService) MakeOrder(arg0 *dto.OrderRequest, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeOrder indicates an expected call of MakeOrder.
func (mr *MockOrderServiceMockRecorder) MakeOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrder", reflect.TypeOf((*MockOrderService)(nil).MakeOrder), arg0, arg1)
}
